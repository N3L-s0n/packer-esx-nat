# -*- mode: ruby -*-
# nvim: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # General Vagrant VM configuration.
  config.vm.box = "centos7-virtualbox"

  config.ssh.username = 'packer'
  config.ssh.insert_key = false
  config.ssh.keys_only = false

  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provider :virtualbox do |v|
    v.memory = 256
    v.linked_clone = true
  end

  config.vm.provision "ansible" do |ansible|

    ansible.playbook = "../ansible/playbook.yml"

    ansible.host_vars = {
      "primary"   => { 
        "ka_priority" => "10",
        "ka_password" => "testing",
        "ka_virtual_ipv4" => "192.168.1.10"
      },
      "secondary" => { 
        "ka_priority" =>  "9",
        "ka_password" => "testing",
        "ka_virtual_ipv4" => "192.168.1.10"
      }
    }

    ansible.groups = {
      "loadbalancing" => ["primary", "secondary"],
      "webservers" => ["app1", "app2"],
      "databases" => ["db1", "db2"]
    }

    ansible.extra_vars = {

      "http_host" => "www.archipress.com",
      "db_name" => "wordpress",
      "db_user" => "wordpress",
      "db_password" => "dev-password",

      "wp_user" => "admin",
      "wp_password" => "dev-password",

      "networks" => [{
        "name" => "wan",
        "type" => "public",
        "ipv4" => "192.168.0.0",
        "prefix"  => "24",

        "forward_from" => [ # FORWARD TO WAN
          { "src_network" => "lan", "src_addr" => "network", "src_port" => "any", "dest_addr" => "any", "dest_port" => "80"},
          { "src_network" => "lan", "src_addr" => "network", "src_port" => "any", "dest_addr" => "any", "dest_port" => "443"},
        ]
      },
      {
        "name" => "lan",
        "type" => "private",
        "ipv4" => "192.168.1.0",
        "prefix"  => "24",

        "forward_from" => [ # FORWARD TO LAN
          { "src_network" => "wan", "src_addr" => "any", "src_port" => "any", "dest_addr" => "192.168.1.10", "dest_port" => "80"},
          { "src_network" => "wan", "src_addr" => "any", "src_port" => "any", "dest_addr" => "192.168.1.10", "dest_port" => "443"},
        ]
      }],

      "dnat_tcp" => { # PREROUTING
        "80"  => "192.168.1.10", # HTTP
        "443" => "192.168.1.10", # HTTPS
      },
      
      # VPN VARIABLES
      "vpn_client_ipv4" => "10.0.0.1",
      "vpn_server_ipv4" => "10.0.0.2",
      "vpn_remote_ipv4" => "192.168.0.101",

      "vpn_routes" => [
        {
          "ipv4" => "192.168.1.0",
          "netmask" => "255.255.255.0"
        }
      ]
    }
  end

  # Firewall
  config.vm.define "firewall" do |firewall|
    firewall.vm.hostname = "test-firewall.dev"
    #firewall.vm.cloud_init content_type: "text/cloud-config", path: "../terraform/firewall.cfg"
    firewall.vm.network "public_network", ip: "192.168.0.101"  # WAN: Bridge

    firewall.vm.network "private_network", ip: "192.168.1.1",  # LAN: Internal Network
      virtualbox__intnet: "lan"
  end

  # Primary LB on LAN
  config.vm.define "primary" do |lb|
    lb.vm.hostname = "test-lb1.dev"
    lb.vm.network "private_network", ip: "192.168.1.11", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    lb.vm.provision "shell",
      inline: $add_routes
  end

  # Secondary LB on LAN
  config.vm.define "secondary" do |lb|
    lb.vm.hostname = "test-lb2.dev"
    lb.vm.network "private_network", ip: "192.168.1.12", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    lb.vm.provision "shell",
      inline: $add_routes
  end


  # APP 1 on LAN
  config.vm.define "app1" do |app|
    app.vm.hostname = "test-app1.dev"
    app.vm.network "private_network", ip: "192.168.1.21", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    app.vm.provision "shell",
      inline: $add_routes
  end

  # APP 2 on LAN
  config.vm.define "app2" do |app|
    app.vm.hostname = "test-app2.dev"
    app.vm.network "private_network", ip: "192.168.1.22", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    app.vm.provision "shell",
      inline: $add_routes
  end

  # DB 1 on LAN
  config.vm.define "db1" do |db|
    db.vm.hostname = "test-db1.dev"
    db.vm.network "private_network", ip: "192.168.1.31", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    db.vm.provision "shell",
      inline: $add_routes
  end

  # DB 2 on LAN
  config.vm.define "db2" do |db|
    db.vm.hostname = "test-app2.dev"
    db.vm.network "private_network", ip: "192.168.1.32", netmask: "255.255.255.0",  # LAN
      virtualbox__intnet: "lan"

    $add_routes = <<-'SCRIPT'
      sudo ip route add 192.168.0.0/24 via 192.168.1.1 dev enp0s8
      sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev enp0s8
    SCRIPT

    db.vm.provision "shell",
      inline: $add_routes
  end

end
